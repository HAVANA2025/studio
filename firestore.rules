rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      // Admins can be hardcoded or managed in a 'users' collection
      let hardcodedAdmins = [
        'mtatinen@gitam.edu',
        'nmenmula@gitam.edu',
        'adid@gitam.edu',
        'gelectra@gitam.edu',
        'webdevlopment0210@gmail.com',
        'premkumarjanumula@gmail.com'
      ];
      // Check if the user's email is in the hardcoded list
      let isHardcodedAdmin = request.auth.token.email in hardcodedAdmins;
      
      // Check if user has 'Executive Board' role in the 'users' collection
      let isRoleAdmin = exists(/databases/$(database)/documents/users/$(userId)) &&
                        get(/databases/$(database)/documents/users/$(userId)).data.role == 'Executive Board';
                        
      return isHardcodedAdmin || isRoleAdmin;
    }

    // Rules for the 'announcements' collection
    match /announcements/{announcementId} {
      // Anyone can read announcements
      allow read: if true;
      // Only admins can create, update, or delete announcements
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'events' collection
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      // Only admins can create, update, or delete events
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can only read/write their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user document
      allow read: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
